AWSTemplateFormatVersion: 2010-09-09
Description: cloudformation-test
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  QueueName:
    Description: The queue name for integration with API Gateway
    Type: String
    Default: performance-data-message-queue
  ApiGatewayDeploymentStageName:
    Description: The API Gateway stage for this deployment
    Type: String
    Default: dev
Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Performance Data Endpoint
      Description: API for sending performance data via API Gateway directly to SQS
      FailOnWarnings: true
      Body:
        openapi: 3.0.0
        info:
          title: API Gateway -> SQS API
          description: This API handles a route with a POST body to be placed on an
            SQS queue
          contact:
            email: collin@tagsafe.io
          version: 1.0.0
        paths:
          /events:
            post:
              summary: Handles new performance data
              description: Places data on an SQS queue for processing
              operationId: performanceData
              requestBody:
                description: The performance data to push onto queue for processing
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/PerformanceData'
              responses:
                '200':
                  description: Data successfully handled and placed on queue
                '400':
                  description: Bad request
                '500':
                  description: Server Error
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - ApiGatewayToSQSRole
                  - Arn
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/performance-data-message-queue
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
                requestTemplates:
                  application/json: Action=SendMessage&MessageBody=$input.body
                passthroughBehavior: never
                type: aws
        components:
          schemas:
            PerformanceData:
              required:
              - page_load_ts
              type: object
              properties:
                created_at:
                  type: string
                  description: Timestamp in ISO-8601 format UTC
                  format: date-time
                  example: 2021-01-01 12:01:00+00:00
  ApiGatewayToSQSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: ApiGatewayToSQSRole
      Policies:
      - PolicyName: ApiGatewayLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: sqs:SendMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - PerformanceDataMessageQueue
              - Arn
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Effect: Allow
            Resource: '*'
  PerformanceDataMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: performance-data-message-queue
  SQSPayloadLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an
        associated SQS queue.
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Handler: src/handlers/sqs-data-consumer.consumeMessages
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - PerformanceDataMessageQueue
              - Arn
      MemorySize: 128
      Timeout: 25
      Policies:
      - AWSLambdaBasicExecutionRole
      CodeUri: SQSPayloadLogger
    Metadata:
      SamResourceId: SQSPayloadLogger
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
