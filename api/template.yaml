AWSTemplateFormatVersion: 2010-09-09
Description: >-
  cloudformation-test

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  EventDataToProcessS3BucketName:
    Description: The S3 bucket name to upload payload data to
    Type: String
    Default: 'event-data-to-process'
    AllowedPattern : ".+"
  FailedToProcessEventDataS3BucketName:
    Description: The S3 bucket name to upload event data that failed to be processed
    Type: String
    Default: 'failed-to-process-event-data'
    AllowedPattern : ".+"
  S3UploaderLambdaFunctionName:
    Description: The name of the Lambda function that uploads the payload to S3 and invokes the 'Event Processor' Lambda function
    Type: String
    Default: 'event-data-s3-uploader'
    AllowedPattern : ".+"
  EventProcessorLambdaFunctionName:
    Description: The name of the Lambda function to process the event payloads
    Type: String
    Default: 'event-data-processor'
    AllowedPattern : ".+"
  DatabaseName:
    Description: The name of the database analytic data should be written to
    Type: String
    AllowedPattern : ".+"
  DatabaseUsername: 
    Description: The username of the database analytic data should be written to
    Type: String
    AllowedPattern : ".+"
  DatabasePassword:
    Description: The password of the database analytic data should be written to
    Type: String
    AllowedPattern : ".+"
  DatabaseHostname:
    Description: The hostname of the database analytic data should be written to
    Type: String
    AllowedPattern : ".+"
  DatabasePort:
    Description: The port of the database analytic data should be written to
    Type: Number
    Default: 5432
    # AllowedPattern : "[0-9]+"

Resources:
  EventDataToProcessS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref EventDataToProcessS3BucketName
  
  FailedToProcessEventDataS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FailedToProcessEventDataS3BucketName

  S3UploaderAndAsyncFunctionInvoker:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref S3UploaderLambdaFunctionName
      Description: Uploads the payload to S3, and then invokes the consumer Lambda function asynchronously
      Runtime: nodejs16.x
      Architectures:
      - arm64
      Handler: src/s3Storage.uploadToS3AndInvokeFunction
      Role: !GetAtt S3UploaderRole.Arn
      Timeout: 10
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref EventDataToProcessS3BucketName
          EVENT_CONSUMER_LAMBDA_FUNCTION_NAME: !Ref EventProcessorLambdaFunctionName

  EventConsumerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref EventProcessorLambdaFunctionName
      Description: Ingests event data from provided S3 URL
      Runtime: nodejs16.x
      Architectures:
      - arm64
      Handler: src/index.captureEvents
      Role: !GetAtt EventConsumerRole.Arn
      Timeout: 30
      Environment:
        Variables:
          DB_HOST: !Ref DatabaseHostname
          DB_NAME: !Ref DatabaseName 
          DB_USERNAME: !Ref DatabaseUsername
          DB_PASSWORD: !Ref DatabasePassword
          DB_PORT: !Ref DatabasePort
          FAILED_TO_PROCESS_EVENT_DATA_S3_BUCKET_NAME: !Ref FailedToProcessEventDataS3BucketName

  S3UploaderRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: ExecuteEventConsumerLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt EventConsumerLambdaFunction.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: 
                  - !Join ['', ['arn:aws:s3:::', !Ref EventDataToProcessS3Bucket, '/*']]
                  - !Join ['', ['arn:aws:s3:::', !Ref FailedToProcessEventDataS3Bucket, '/*']]
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  EventConsumerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: 
                  - !Join ['', ['arn:aws:s3:::', !Ref EventDataToProcessS3Bucket, '/*']]
                  - !Join ['', ['arn:aws:s3:::', !Ref FailedToProcessEventDataS3Bucket, '/*']]
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'